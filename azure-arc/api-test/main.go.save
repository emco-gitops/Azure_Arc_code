package main

import (
    "fmt"
    "bytes"
    "io/ioutil"
    "log"
    "net/http"
    "net/url"
    "os"
    "encoding/json"
)
const (
   clientIdValue string = "4a6571b0-1a95-41e8-8e4b-1cabe36ebd81"
   resourceName string = "https://management.core.windows.net/"
   clientSecretValue string = "WA.7Q~I4pXCZVFuFB5dwosA7aUhldjTs6-TB1"
   tenantId string = "1e452d66-a99c-413b-b87f-bc0c04219888"
   repositoryUrlName string = "https://github.com/Azure/arc-k8s-demo"
   gitConfigurationName string = "cluster-config-two"
   subscriptionId string = "a68d0074-3737-48ac-9af0-b4a2e93f5e11"
   arcClusterName string = "AzureArcT                                                                                                                                est1"
)

type Token struct {
   TokenType string `json:"token_type"`
   ExpiresIn string `json:"expires_in"`
   ExtExpiresIn string `json:"ext_expires_in"`
   ExpiresOn string `json:"expires_on"`
   NotBefore string `json:"not_before"`
   Resource string `json:"resource"`
   AccessToken string `json:"access_token"`
}

type Properties struct {
  RepositoryUrl string `json:"repositoryUrl"`
  OperatorNamespace string `json:"operatorNamespace"`
  OperatorInstanceName string `json:"operatorInstanceName"`
  OperatorType string `json:"operatorType"`
  OperatorParams string `json:"operatorParams"`
  OperatorScope string `json:"operatorScope"`
}

func main() {
   //Rest api to get the access token
   client := http.Client{}
   data := url.Values{}
   data.Set("grant_type","client_credentials")
   data.Add("client_id",clientIdValue)
   data.Add("resource",resourceName)
   data.Add("client_secret",clientSecretValue)
   url := "https://login.microsoftonline.com/" + tenantId + "/oauth2/token"
   req , err := http.NewRequest("POST",url,bytes.NewBufferString(data.Encode()))
   if err != nil {
     //Handle Error
   }

   //req.Header = http.Header{
       //"Host": []string{"www.host.com"},
       //"Content-Type": []string{"application/json"},
       //"Authorization": []string{"Bearer Token"},
   //}
   req.Header.Set("Content-Type", "application/x-www-form-urlencoded; param=value")
   res , err := client.Do(req)
   //if err != nil {
       //Handle Error
   //}

    if err != nil {
        fmt.Print(err.Error())
        os.Exit(1)
    }
    responseData, err := ioutil.ReadAll(res.Body)
    if err != nil {
        log.Fatal(err)
    }
    fmt.Printf("%T\n",responseData)

    // Unmarshall the response body into json
    newToken:= Token{}
    json.Unmarshal(responseData,&newToken)

    fmt.Printf("%+v\n", newToken.AccessToken)


   // POST request to create git configuration
   properties := Properties(repositoryUrlName,gitConfigurationName,gitConfigurationName,"flux","","cluster")
   propertiesData, err := json.Marshal(properties)
       if err != nil {
        log.Fatal("bad", err)
    }
  postData := url.Values{}
  postData.Set("properties",string(propertiesData))
}

